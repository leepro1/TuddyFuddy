def DOCKER_REGISTRY = "inyub"  // 본인의 Docker Hub 사용자명
def REPOSITORY_NAME = "tuddyfuddy"
def SERVICE_NAME = "context-service"  // 서비스별로 변경

pipeline {
    agent any
    
    environment {
        DOCKER_CREDENTIALS = credentials('docker-hub-credential')
    }
    
    stages {
        stage('Prepare') {
            steps {
                dir(SERVICE_NAME) {
                    // gradlew 파일에 실행 권한 부여
                    sh 'chmod +x ./gradlew'
                }
            }
        }

        stage('Build') {
            steps {
                dir(SERVICE_NAME) {
                    sh './gradlew clean build -x test'
                }
            }
        }

        stage('Prepare Environment') {
            steps {
                dir(SERVICE_NAME) {
                    // 디렉토리 권한 설정
                    sh 'chmod -R 777 .'

                    // Secret file credential에서 .env 파일 가져오기
                    withCredentials([file(credentialsId: 'context-service-env', variable: 'ENV_FILE')]) {
                        sh '''
                            # .env 파일 복사
                            cp -f $ENV_FILE .env
                            chmod 644 .env
                            
                            # 환경변수 로드 및 확인
                            echo "Applying environment variables from .env"
                            export $(cat .env | grep -v '^#' | xargs)
                            
                            # 주요 환경변수 존재 여부 확인 (예시)
                            if [ -z "$WEATHER_API_URL" ]; then
                                echo "Error: WEATHER_API_URL is not set"
                                exit 1
                            fi
                            '''
                    }
                }
            }
        }
        
        stage('Docker Build & Push') {
            steps {
                dir(SERVICE_NAME) {
                    sh """
                        docker build -t ${DOCKER_REGISTRY}/${REPOSITORY_NAME}:${SERVICE_NAME} .
                        
                        echo ${DOCKER_CREDENTIALS_PSW} | docker login -u ${DOCKER_CREDENTIALS_USR} --password-stdin
                        
                        docker push ${DOCKER_REGISTRY}/${REPOSITORY_NAME}:${SERVICE_NAME}
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // 기존 컨테이너 중지 및 제거
                    sh """
                        docker stop ${SERVICE_NAME} || true
                        docker rm ${SERVICE_NAME} || true
                    """
                    
                    // 새 컨테이너 실행
                    sh """
                        docker run -d \
                            --name ${SERVICE_NAME} \
                            --network app-network \
                            -p 8082:8080 \
                            ${DOCKER_REGISTRY}/${REPOSITORY_NAME}:${SERVICE_NAME}
                    """
                }
            }
        }
    }
    
    post {
        always {
            sh 'docker logout'
        }
    }
}