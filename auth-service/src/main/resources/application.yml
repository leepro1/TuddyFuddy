server:
  port: ${SERVER_PORT:8081}

spring:
  application:
    name: auth-service
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
  #      password: ${REDIS_PASSWORD:1234}
  message:
    kafka:
      host: ${KAFKA_HOST}
      port: ${KAFKA_PORT}
      group-id: ${KAFKA_GROUP}
#  cloud:
#    config:
#      uri: http://localhost:8888
#      fail-fast: true  # config 서버 연결 실패시 애플리케이션 구동 실패
#    bus:
#      enabled: true
#      destination: springCloudBus
#      refresh:
#        enabled: true

jwt:
  secret: ${JWT_SECRET}

kakao:
  client-id: ${KAKAO_CLIENT_ID}
  client-secret: ${KAKAO_CLIENT_SECRET}
  redirect-uri: ${KAKAO_REDIRECT_URI}

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,busrefresh,circuitbreakers
  metrics:
    export:
      prometheus:
        enabled: true

resilience4j:
  circuitbreaker:
    instances:
      kakao-api:
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        registerHealthIndicator: true
        allowHealthIndicatorToFail: true
      user-service:
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        registerHealthIndicator: true
        allowHealthIndicatorToFail: true

  timelimiter:
    instances:
      kakao-api:
        timeoutDuration: 3s
      user-service:
        timeoutDuration: 3s

logging:
  level:
    org.springframework.web: "info"
    org.hibernate: "info"
  file:
    name: /var/log/applications/${spring.application.name}/application.log